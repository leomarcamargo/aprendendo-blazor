@page "/cadastrar"

@inject IRepository Repository
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inject IMostrarMensagem MostrarMensagem

<h3>Cadastrar</h3>

<EditForm Model="@_userInfo" OnValidSubmit="CriarUsuario">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@_userInfo.Email" autocomplete="new-password" />
            <ValidationMessage For="@(() => _userInfo.Email)" />
        </div>
    </div>

    <div class="form-group">
        <label>Senha:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@_userInfo.Senha" autocomplete="new-password" />
            <ValidationMessage For="@(() => _userInfo.Senha)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>

</EditForm>

@code {
    private readonly UserInfo _userInfo = new UserInfo();

    private async Task CriarUsuario()
    {
        var httpResponse = await Repository.Post<UserInfo, UserToken>("api/conta/criar", _userInfo);

        if (httpResponse.Error)
        {
            await MostrarMensagem.MostrarMensagemErro(await httpResponse.GetBody());
        }
        else
        {
            await LoginService.Login(httpResponse.Response);
            NavigationManager.NavigateTo("");
        }
    }
}