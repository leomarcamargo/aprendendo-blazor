@page "/pessoa"
@inject IRepository Repository
@inject IMostrarMensagem MostrarMensagem

<div class="clearfix mb-3">
    <h3 class="float-left">Pessoas</h3>
    <a class="btn btn-primary float-right" href="pessoa/criar">
        Cadastrar
    </a>
</div>

<ListaGenerica Lista="Pessoa">
    <ExisteRegistrosCompleto>
        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th>NOME</th>
                    <th>AÇÕES</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pessoa in Pessoa)
                {
                    <tr>
                        <td>@pessoa.Nome</td>
                        <td>
                            <a href="/pessoa/editar/@pessoa.Id" class="btn btn-warning btn-sm">Editar</a> |
                            <a href="/pessoa/@pessoa.Id/@pessoa.Nome.Replace(" ", "-").ToLower()" class="btn btn-sm btn-info">Visualizar</a> |
                            <button class="btn btn-danger btn-sm" @onclick="@(() => ExcluirPessoa(pessoa))">Excluir</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </ExisteRegistrosCompleto>
</ListaGenerica>

<Paginacao PaginaAtual="_paginaAtual"
           PaginaSelecionada="PaginaSelecionada"
           TotalPaginas="_totalPaginas" />

@code {
    public List<Pessoa> Pessoa { get; set; }
    private int _paginaAtual = 1;
    private int _totalPaginas;

    private async Task PaginaSelecionada(int pagina)
    {
        _paginaAtual = pagina;
        await Carregar(pagina);
    }

    protected override async Task OnInitializedAsync()
    {
        await Carregar();
    }

    private async Task Carregar(int pagina = 1)
    {
        var httpResponse = await Repository.Get<List<Pessoa>>($"api/pessoa?pagina={pagina}");
        if (!httpResponse.Error)
        {
            Pessoa = httpResponse.Response;
            _totalPaginas = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault() ?? string.Empty);
        }
    }

    public async Task ExcluirPessoa(Pessoa pessoa)
    {
        var responseHttp = await Repository.Delete($"api/pessoa/{pessoa.Id}");
        if (responseHttp.Error)
        {
            await MostrarMensagem.MostrarMensagemErro(await responseHttp.GetBody());
        }
        else
        {
            await Carregar();
        }
    }
}