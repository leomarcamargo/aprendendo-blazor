@page "/filme/pesquisar"
@inject IRepository Repository
@inject NavigationManager NavigationManager

<h3>Pesquisar filme</h3>
<hr />
<div class="row">
    <div class="col-md-12">
        <div class="form-row">
            <div class="form-group mb-2 col">
                <label for="Titulo" class="sr-only">Título</label>
                <input @bind-value="_titulo" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))"
                       type="text" class="form-control" id="Titulo " placeholder="Título do Filme" />
            </div>

            <div class="form-group mx-sm-3 mb-2 col">
                <select class="form-control" @bind="_generoSelecionado">
                    <option value="0">Selecione um gênero</option>
                    @foreach (var item in _generos)
                    {
                        <option value="@item.Id">@item.Nome</option>
                    }
                </select>
            </div>

            <div class="form-group mx-sm-3 mb-2 col-auto">
                <input type="checkbox" class="form-check-input" id="Estreias" @bind="_proximasEstreias" />
                <label class="form-check-label" for="Estreias">
                    Próximas Estréias
                </label>
            </div>

            <div class="form-group mx-sm-3 mb-2 col-auto">
                <input type="checkbox" class="form-check-input" id="EmCartaz" @bind="_emCartaz" />
                <label class="form-check-label" for="EmCartaz">
                    Em Cartaz
                </label>
            </div>

            <div class="form-group mx-sm-3 mb-2 col-auto">
                <input type="checkbox" class="form-check-input" id="MaisVotados" @bind="_maisVotados" />
                <label class="form-check-label" for="MaisVotados">
                    Mais Votadas
                </label>
            </div>

            <div class="col-auto">
                <button type="button" class="btn btn-primary mb-2 mx-sm-1" @onclick="CarregarFilmes">Pesquisar</button>
                <button type="button" class="btn btn-danger mb-2" @onclick="Limpar">Limpar</button>
            </div>
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <ListaFilmes Filmes="_filmes"/>
        <Paginacao PaginaAtual="_paginaAtual" TotalPaginas="_totalPaginas" PaginaSelecionada="PaginaSelecionada" />
    </div>
</div>

@code {
    private List<Filme> _filmes;

    string _titulo = string.Empty;
    string _generoSelecionado = "0";
    private bool _proximasEstreias;
    private bool _emCartaz;
    private bool _maisVotados;
    private List<Genero> _generos = new List<Genero>();
    public Dictionary<string, string> QueryStringDictionary = new Dictionary<string, string>();
    private int _paginaAtual = 1;
    private int _totalPaginas;

    protected override async Task OnInitializedAsync()
    {
        await ObterGeneros();
        var url = NavigationManager.Uri;
        var queries = NavigationManager.ObterQueryStrings(url);
        if (queries == null)
        {
            await RealizarBusca(string.Empty);
        }
        else
        {
            QueryStringDictionary = queries;
            LimparCampos();
            var queryStrings = url.Split(new[] { "?" }, StringSplitOptions.None)[1];
            await RealizarBusca(queryStrings);
        }

        await RealizarBusca("");
    }

    private void LimparCampos()
    {
        if (QueryStringDictionary.ContainsKey("generoid"))
        {
            _generoSelecionado = QueryStringDictionary["generoid"];
        }

        if (QueryStringDictionary.ContainsKey("titulo"))
        {
            _titulo = QueryStringDictionary["titulo"];
        }

        if (QueryStringDictionary.ContainsKey("emcartaz"))
        {
            bool.TryParse(QueryStringDictionary["emcartaz"], out _emCartaz);
        }

        if (QueryStringDictionary.ContainsKey("estreias"))
        {
            bool.TryParse(QueryStringDictionary["estreias"], out _proximasEstreias);
        }

        if (QueryStringDictionary.ContainsKey("maisvotados"))
        {
            bool.TryParse(QueryStringDictionary["maisvotados"], out _maisVotados);
        }

        if (QueryStringDictionary.ContainsKey("pagina"))
        {
            int.TryParse(QueryStringDictionary["pagina"], out _paginaAtual);
        }
    }

    private async Task ObterGeneros()
    {
        var httpResponse = await Repository.Get<List<Genero>>("api/genero", incluirToken:false);
        _generos = httpResponse.Response;
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CarregarFilmes();
        }
    }

    private async Task CarregarFilmes()
    {
        var queryStrings = GerarQueryStrings();
        NavigationManager.NavigateTo("/filme/pesquisar?" + queryStrings);
        await RealizarBusca(queryStrings);
    }

    private async Task PaginaSelecionada(int pagina)
    {
        _paginaAtual = pagina;
        await CarregarFilmes();
    }

    private async Task RealizarBusca(string queryStrings)
    {
        var httpResponse = await Repository.Get<List<Filme>>("api/filme/filtrar?" + queryStrings, incluirToken: false);
        _totalPaginas = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault() ?? string.Empty);
        _filmes = httpResponse.Response;
    }

    private string GerarQueryStrings()
    {
        QueryStringDictionary ??= new Dictionary<string, string>();
        QueryStringDictionary["generoid"] = _generoSelecionado;
        QueryStringDictionary["titulo"] = _titulo;
        QueryStringDictionary["emcartaz"] = _emCartaz.ToString();
        QueryStringDictionary["estreias"] = _proximasEstreias.ToString();
        QueryStringDictionary["maisvotados"] = _maisVotados.ToString();
        QueryStringDictionary["pagina"] = _paginaAtual.ToString();

        var valoresPadroes = new List<string>{"false", "", "0"};

        //GeneroId=7&titulo=spider

        return string.Join("&", QueryStringDictionary
            .Where(x => !valoresPadroes.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}")
            .ToArray());
    }


    private async Task Limpar()
    {

        _titulo = string.Empty;
        _generoSelecionado = "0";
        _proximasEstreias = false;
        _emCartaz = false;
        _maisVotados = false;
        _paginaAtual = 1;
        await CarregarFilmes();
    }
}
